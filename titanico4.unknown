{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMIOdYByqyFKiNi2YC+RqOm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"N6wievhRMyNP","executionInfo":{"status":"ok","timestamp":1715591987416,"user_tz":-330,"elapsed":1143,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}}},"outputs":[],"source":["import pandas"]},{"cell_type":"code","source":["data=pandas.read_csv('titanic_dataset.csv')\n","data\n","# Survived is a target variable or categorial variable ,dependent variable,y,label"],"metadata":{"id":"vI7pPx8hM5z_","executionInfo":{"status":"ok","timestamp":1715591987417,"user_tz":-330,"elapsed":51,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"outputId":"ff8b65b6-29ce-421a-a434-dfd9e6f5f7c4","colab":{"base_uri":"https://localhost:8080/","height":947}},"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     PassengerId  Survived  Pclass  \\\n","0              1         0       3   \n","1              2         1       1   \n","2              3         1       3   \n","3              4         1       1   \n","4              5         0       3   \n","..           ...       ...     ...   \n","886          887         0       2   \n","887          888         1       1   \n","888          889         0       3   \n","889          890         1       1   \n","890          891         0       3   \n","\n","                                                  Name     Sex   Age  SibSp  \\\n","0                              Braund, Mr. Owen Harris    male  22.0      1   \n","1    Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n","2                               Heikkinen, Miss. Laina  female  26.0      0   \n","3         Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n","4                             Allen, Mr. William Henry    male  35.0      0   \n","..                                                 ...     ...   ...    ...   \n","886                              Montvila, Rev. Juozas    male  27.0      0   \n","887                       Graham, Miss. Margaret Edith  female  19.0      0   \n","888           Johnston, Miss. Catherine Helen \"Carrie\"  female   NaN      1   \n","889                              Behr, Mr. Karl Howell    male  26.0      0   \n","890                                Dooley, Mr. Patrick    male  32.0      0   \n","\n","     Parch            Ticket     Fare Cabin Embarked  \n","0        0         A/5 21171   7.2500   NaN        S  \n","1        0          PC 17599  71.2833   C85        C  \n","2        0  STON/O2. 3101282   7.9250   NaN        S  \n","3        0            113803  53.1000  C123        S  \n","4        0            373450   8.0500   NaN        S  \n","..     ...               ...      ...   ...      ...  \n","886      0            211536  13.0000   NaN        S  \n","887      0            112053  30.0000   B42        S  \n","888      2        W./C. 6607  23.4500   NaN        S  \n","889      0            111369  30.0000  C148        C  \n","890      0            370376   7.7500   NaN        Q  \n","\n","[891 rows x 12 columns]"],"text/html":["\n","  <div id=\"df-3f39706f-62c3-483f-8f60-d77277768f17\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Ticket</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Braund, Mr. Owen Harris</td>\n","      <td>male</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>A/5 21171</td>\n","      <td>7.2500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n","      <td>female</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>PC 17599</td>\n","      <td>71.2833</td>\n","      <td>C85</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>Heikkinen, Miss. Laina</td>\n","      <td>female</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>STON/O2. 3101282</td>\n","      <td>7.9250</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n","      <td>female</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>113803</td>\n","      <td>53.1000</td>\n","      <td>C123</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Allen, Mr. William Henry</td>\n","      <td>male</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>373450</td>\n","      <td>8.0500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>886</th>\n","      <td>887</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>Montvila, Rev. Juozas</td>\n","      <td>male</td>\n","      <td>27.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>211536</td>\n","      <td>13.0000</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>887</th>\n","      <td>888</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Graham, Miss. Margaret Edith</td>\n","      <td>female</td>\n","      <td>19.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>112053</td>\n","      <td>30.0000</td>\n","      <td>B42</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>888</th>\n","      <td>889</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n","      <td>female</td>\n","      <td>NaN</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>W./C. 6607</td>\n","      <td>23.4500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>889</th>\n","      <td>890</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Behr, Mr. Karl Howell</td>\n","      <td>male</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>111369</td>\n","      <td>30.0000</td>\n","      <td>C148</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>890</th>\n","      <td>891</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Dooley, Mr. Patrick</td>\n","      <td>male</td>\n","      <td>32.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>370376</td>\n","      <td>7.7500</td>\n","      <td>NaN</td>\n","      <td>Q</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>891 rows Ã— 12 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3f39706f-62c3-483f-8f60-d77277768f17')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-3f39706f-62c3-483f-8f60-d77277768f17 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-3f39706f-62c3-483f-8f60-d77277768f17');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-bf1fdc53-adcf-4c71-8467-a6cf6f3eee36\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bf1fdc53-adcf-4c71-8467-a6cf6f3eee36')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-bf1fdc53-adcf-4c71-8467-a6cf6f3eee36 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_785399e0-52ce-465a-a93f-f93c182583ee\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_785399e0-52ce-465a-a93f-f93c182583ee button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('data');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data","summary":"{\n  \"name\": \"data\",\n  \"rows\": 891,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 257,\n        \"min\": 1,\n        \"max\": 891,\n        \"num_unique_values\": 891,\n        \"samples\": [\n          710,\n          440,\n          841\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 891,\n        \"samples\": [\n          \"Moubarek, Master. Halim Gonios (\\\"William George\\\")\",\n          \"Kvillner, Mr. Johan Henrik Johannesson\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.526497332334042,\n        \"min\": 0.42,\n        \"max\": 80.0,\n        \"num_unique_values\": 88,\n        \"samples\": [\n          0.75,\n          22.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ticket\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 681,\n        \"samples\": [\n          \"11774\",\n          \"248740\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49.6934285971809,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          11.2417,\n          51.8625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cabin\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 147,\n        \"samples\": [\n          \"D45\",\n          \"B49\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"S\",\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":2}]},{"cell_type":"code","source":["data.shape"],"metadata":{"id":"Z-X8fQjeNnRZ","executionInfo":{"status":"ok","timestamp":1715591987418,"user_tz":-330,"elapsed":48,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"outputId":"86ee99e1-8ce9-4b8f-dd6d-69f6b800b6dc","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(891, 12)"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["data.info()"],"metadata":{"id":"1R_3ac8zNx49","executionInfo":{"status":"ok","timestamp":1715591987419,"user_tz":-330,"elapsed":46,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"outputId":"c5a0592f-179f-4fbc-b3d5-b12a402cc6cc","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 891 entries, 0 to 890\n","Data columns (total 12 columns):\n"," #   Column       Non-Null Count  Dtype  \n","---  ------       --------------  -----  \n"," 0   PassengerId  891 non-null    int64  \n"," 1   Survived     891 non-null    int64  \n"," 2   Pclass       891 non-null    int64  \n"," 3   Name         891 non-null    object \n"," 4   Sex          891 non-null    object \n"," 5   Age          714 non-null    float64\n"," 6   SibSp        891 non-null    int64  \n"," 7   Parch        891 non-null    int64  \n"," 8   Ticket       891 non-null    object \n"," 9   Fare         891 non-null    float64\n"," 10  Cabin        204 non-null    object \n"," 11  Embarked     889 non-null    object \n","dtypes: float64(2), int64(5), object(5)\n","memory usage: 83.7+ KB\n"]}]},{"cell_type":"code","source":["data.describe()"],"metadata":{"id":"MD81ZEGQN3R2","executionInfo":{"status":"ok","timestamp":1715591987419,"user_tz":-330,"elapsed":43,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"outputId":"a62a3666-2444-489a-a782-3d98c8acc996","colab":{"base_uri":"https://localhost:8080/","height":320}},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       PassengerId    Survived      Pclass         Age       SibSp  \\\n","count   891.000000  891.000000  891.000000  714.000000  891.000000   \n","mean    446.000000    0.383838    2.308642   29.699118    0.523008   \n","std     257.353842    0.486592    0.836071   14.526497    1.102743   \n","min       1.000000    0.000000    1.000000    0.420000    0.000000   \n","25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n","50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n","75%     668.500000    1.000000    3.000000   38.000000    1.000000   \n","max     891.000000    1.000000    3.000000   80.000000    8.000000   \n","\n","            Parch        Fare  \n","count  891.000000  891.000000  \n","mean     0.381594   32.204208  \n","std      0.806057   49.693429  \n","min      0.000000    0.000000  \n","25%      0.000000    7.910400  \n","50%      0.000000   14.454200  \n","75%      0.000000   31.000000  \n","max      6.000000  512.329200  "],"text/html":["\n","  <div id=\"df-9b2b0fb0-2d1d-48b3-8aed-440082209b82\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>714.000000</td>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>446.000000</td>\n","      <td>0.383838</td>\n","      <td>2.308642</td>\n","      <td>29.699118</td>\n","      <td>0.523008</td>\n","      <td>0.381594</td>\n","      <td>32.204208</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>257.353842</td>\n","      <td>0.486592</td>\n","      <td>0.836071</td>\n","      <td>14.526497</td>\n","      <td>1.102743</td>\n","      <td>0.806057</td>\n","      <td>49.693429</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>0.420000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>223.500000</td>\n","      <td>0.000000</td>\n","      <td>2.000000</td>\n","      <td>20.125000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>7.910400</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>446.000000</td>\n","      <td>0.000000</td>\n","      <td>3.000000</td>\n","      <td>28.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>14.454200</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>668.500000</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>38.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>31.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>891.000000</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>80.000000</td>\n","      <td>8.000000</td>\n","      <td>6.000000</td>\n","      <td>512.329200</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9b2b0fb0-2d1d-48b3-8aed-440082209b82')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-9b2b0fb0-2d1d-48b3-8aed-440082209b82 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-9b2b0fb0-2d1d-48b3-8aed-440082209b82');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-31661420-8491-4e3b-b5d7-2be4089f111c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-31661420-8491-4e3b-b5d7-2be4089f111c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-31661420-8491-4e3b-b5d7-2be4089f111c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"data\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 320.8159711429855,\n        \"min\": 1.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          891.0,\n          446.0,\n          668.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 314.8713661874558,\n        \"min\": 0.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.3838383838383838,\n          1.0,\n          0.4865924542648575\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 314.2523437079694,\n        \"min\": 0.836071240977049,\n        \"max\": 891.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          891.0,\n          2.308641975308642,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 242.9056731818781,\n        \"min\": 0.42,\n        \"max\": 714.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          29.69911764705882,\n          28.0,\n          714.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 314.4908277465442,\n        \"min\": 0.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          891.0,\n          0.5230078563411896,\n          8.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 314.65971717879,\n        \"min\": 0.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.38159371492704824,\n          6.0,\n          0.8060572211299483\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 330.6256632228578,\n        \"min\": 0.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          32.204207968574636,\n          14.4542,\n          891.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["data.head(5)"],"metadata":{"id":"lujUx9amN-IB","executionInfo":{"status":"ok","timestamp":1715591987420,"user_tz":-330,"elapsed":43,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"outputId":"cc67052e-43fa-4bc7-c38e-699375751539","colab":{"base_uri":"https://localhost:8080/","height":504}},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   PassengerId  Survived  Pclass  \\\n","0            1         0       3   \n","1            2         1       1   \n","2            3         1       3   \n","3            4         1       1   \n","4            5         0       3   \n","\n","                                                Name     Sex   Age  SibSp  \\\n","0                            Braund, Mr. Owen Harris    male  22.0      1   \n","1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n","2                             Heikkinen, Miss. Laina  female  26.0      0   \n","3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n","4                           Allen, Mr. William Henry    male  35.0      0   \n","\n","   Parch            Ticket     Fare Cabin Embarked  \n","0      0         A/5 21171   7.2500   NaN        S  \n","1      0          PC 17599  71.2833   C85        C  \n","2      0  STON/O2. 3101282   7.9250   NaN        S  \n","3      0            113803  53.1000  C123        S  \n","4      0            373450   8.0500   NaN        S  "],"text/html":["\n","  <div id=\"df-df9df3d5-f5e0-4cf6-894b-3a4b12d50aa4\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Ticket</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Braund, Mr. Owen Harris</td>\n","      <td>male</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>A/5 21171</td>\n","      <td>7.2500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n","      <td>female</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>PC 17599</td>\n","      <td>71.2833</td>\n","      <td>C85</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>Heikkinen, Miss. Laina</td>\n","      <td>female</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>STON/O2. 3101282</td>\n","      <td>7.9250</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n","      <td>female</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>113803</td>\n","      <td>53.1000</td>\n","      <td>C123</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Allen, Mr. William Henry</td>\n","      <td>male</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>373450</td>\n","      <td>8.0500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-df9df3d5-f5e0-4cf6-894b-3a4b12d50aa4')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-df9df3d5-f5e0-4cf6-894b-3a4b12d50aa4 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-df9df3d5-f5e0-4cf6-894b-3a4b12d50aa4');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-33e4269b-ef8b-4c12-92da-a3d2eb69ef84\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-33e4269b-ef8b-4c12-92da-a3d2eb69ef84')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-33e4269b-ef8b-4c12-92da-a3d2eb69ef84 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data","summary":"{\n  \"name\": \"data\",\n  \"rows\": 891,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 257,\n        \"min\": 1,\n        \"max\": 891,\n        \"num_unique_values\": 891,\n        \"samples\": [\n          710,\n          440,\n          841\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 891,\n        \"samples\": [\n          \"Moubarek, Master. Halim Gonios (\\\"William George\\\")\",\n          \"Kvillner, Mr. Johan Henrik Johannesson\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.526497332334042,\n        \"min\": 0.42,\n        \"max\": 80.0,\n        \"num_unique_values\": 88,\n        \"samples\": [\n          0.75,\n          22.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ticket\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 681,\n        \"samples\": [\n          \"11774\",\n          \"248740\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49.6934285971809,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          11.2417,\n          51.8625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cabin\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 147,\n        \"samples\": [\n          \"D45\",\n          \"B49\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"S\",\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["data.tail(5)"],"metadata":{"id":"5VcvjoPoODrB","executionInfo":{"status":"ok","timestamp":1715591987421,"user_tz":-330,"elapsed":42,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"outputId":"c5e9ae98-fbea-4c79-abf0-0d0fb67834c8","colab":{"base_uri":"https://localhost:8080/","height":452}},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     PassengerId  Survived  Pclass                                      Name  \\\n","886          887         0       2                     Montvila, Rev. Juozas   \n","887          888         1       1              Graham, Miss. Margaret Edith   \n","888          889         0       3  Johnston, Miss. Catherine Helen \"Carrie\"   \n","889          890         1       1                     Behr, Mr. Karl Howell   \n","890          891         0       3                       Dooley, Mr. Patrick   \n","\n","        Sex   Age  SibSp  Parch      Ticket   Fare Cabin Embarked  \n","886    male  27.0      0      0      211536  13.00   NaN        S  \n","887  female  19.0      0      0      112053  30.00   B42        S  \n","888  female   NaN      1      2  W./C. 6607  23.45   NaN        S  \n","889    male  26.0      0      0      111369  30.00  C148        C  \n","890    male  32.0      0      0      370376   7.75   NaN        Q  "],"text/html":["\n","  <div id=\"df-ea327433-c126-4875-90a9-adb769a5249a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Ticket</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>886</th>\n","      <td>887</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>Montvila, Rev. Juozas</td>\n","      <td>male</td>\n","      <td>27.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>211536</td>\n","      <td>13.00</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>887</th>\n","      <td>888</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Graham, Miss. Margaret Edith</td>\n","      <td>female</td>\n","      <td>19.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>112053</td>\n","      <td>30.00</td>\n","      <td>B42</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>888</th>\n","      <td>889</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n","      <td>female</td>\n","      <td>NaN</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>W./C. 6607</td>\n","      <td>23.45</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>889</th>\n","      <td>890</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Behr, Mr. Karl Howell</td>\n","      <td>male</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>111369</td>\n","      <td>30.00</td>\n","      <td>C148</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>890</th>\n","      <td>891</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Dooley, Mr. Patrick</td>\n","      <td>male</td>\n","      <td>32.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>370376</td>\n","      <td>7.75</td>\n","      <td>NaN</td>\n","      <td>Q</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ea327433-c126-4875-90a9-adb769a5249a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ea327433-c126-4875-90a9-adb769a5249a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ea327433-c126-4875-90a9-adb769a5249a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-7bcf9ad5-0325-4d9e-8802-0f8471f1298a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7bcf9ad5-0325-4d9e-8802-0f8471f1298a')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-7bcf9ad5-0325-4d9e-8802-0f8471f1298a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"data\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 887,\n        \"max\": 891,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          888,\n          891,\n          889\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Graham, Miss. Margaret Edith\",\n          \"Dooley, Mr. Patrick\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.354126134736337,\n        \"min\": 19.0,\n        \"max\": 32.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          19.0,\n          32.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ticket\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"112053\",\n          \"370376\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.09253436952285,\n        \"min\": 7.75,\n        \"max\": 30.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          30.0,\n          7.75\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cabin\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"C148\",\n          \"B42\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"S\",\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["list(data)"],"metadata":{"id":"d4q4tPP1OLkW","executionInfo":{"status":"ok","timestamp":1715591987421,"user_tz":-330,"elapsed":41,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"59103b95-77af-4333-d619-fc9ea96e6a26"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['PassengerId',\n"," 'Survived',\n"," 'Pclass',\n"," 'Name',\n"," 'Sex',\n"," 'Age',\n"," 'SibSp',\n"," 'Parch',\n"," 'Ticket',\n"," 'Fare',\n"," 'Cabin',\n"," 'Embarked']"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["data.groupby(['Sex','Survived']).count()\n","# 1-survived\n","# 0-not survived"],"metadata":{"id":"38LR-Uc7awWE","executionInfo":{"status":"ok","timestamp":1715591987421,"user_tz":-330,"elapsed":36,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"colab":{"base_uri":"https://localhost:8080/","height":226},"outputId":"e0864155-fbc0-40f8-ecaf-73f2df11d5ba"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                 PassengerId  Pclass  Name  Age  SibSp  Parch  Ticket  Fare  \\\n","Sex    Survived                                                               \n","female 0                  81      81    81   64     81     81      81    81   \n","       1                 233     233   233  197    233    233     233   233   \n","male   0                 468     468   468  360    468    468     468   468   \n","       1                 109     109   109   93    109    109     109   109   \n","\n","                 Cabin  Embarked  \n","Sex    Survived                   \n","female 0             6        81  \n","       1            91       231  \n","male   0            62       468  \n","       1            45       109  "],"text/html":["\n","  <div id=\"df-af8a5e58-d307-466d-a2f1-54f0fc3da04b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Ticket</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","    <tr>\n","      <th>Sex</th>\n","      <th>Survived</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th rowspan=\"2\" valign=\"top\">female</th>\n","      <th>0</th>\n","      <td>81</td>\n","      <td>81</td>\n","      <td>81</td>\n","      <td>64</td>\n","      <td>81</td>\n","      <td>81</td>\n","      <td>81</td>\n","      <td>81</td>\n","      <td>6</td>\n","      <td>81</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>233</td>\n","      <td>233</td>\n","      <td>233</td>\n","      <td>197</td>\n","      <td>233</td>\n","      <td>233</td>\n","      <td>233</td>\n","      <td>233</td>\n","      <td>91</td>\n","      <td>231</td>\n","    </tr>\n","    <tr>\n","      <th rowspan=\"2\" valign=\"top\">male</th>\n","      <th>0</th>\n","      <td>468</td>\n","      <td>468</td>\n","      <td>468</td>\n","      <td>360</td>\n","      <td>468</td>\n","      <td>468</td>\n","      <td>468</td>\n","      <td>468</td>\n","      <td>62</td>\n","      <td>468</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>109</td>\n","      <td>109</td>\n","      <td>109</td>\n","      <td>93</td>\n","      <td>109</td>\n","      <td>109</td>\n","      <td>109</td>\n","      <td>109</td>\n","      <td>45</td>\n","      <td>109</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-af8a5e58-d307-466d-a2f1-54f0fc3da04b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-af8a5e58-d307-466d-a2f1-54f0fc3da04b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-af8a5e58-d307-466d-a2f1-54f0fc3da04b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-67630a5f-ab5f-4ea5-bc32-7b935a13328c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-67630a5f-ab5f-4ea5-bc32-7b935a13328c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-67630a5f-ab5f-4ea5-bc32-7b935a13328c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"# 0-not survived\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 176,\n        \"min\": 81,\n        \"max\": 468,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          233,\n          109,\n          81\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 176,\n        \"min\": 81,\n        \"max\": 468,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          233,\n          109,\n          81\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 176,\n        \"min\": 81,\n        \"max\": 468,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          233,\n          109,\n          81\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 133,\n        \"min\": 64,\n        \"max\": 360,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          197,\n          93,\n          64\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 176,\n        \"min\": 81,\n        \"max\": 468,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          233,\n          109,\n          81\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 176,\n        \"min\": 81,\n        \"max\": 468,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          233,\n          109,\n          81\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ticket\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 176,\n        \"min\": 81,\n        \"max\": 468,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          233,\n          109,\n          81\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 176,\n        \"min\": 81,\n        \"max\": 468,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          233,\n          109,\n          81\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cabin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35,\n        \"min\": 6,\n        \"max\": 91,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          91,\n          45,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 176,\n        \"min\": 81,\n        \"max\": 468,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          231,\n          109,\n          81\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["data.isnull().sum()"],"metadata":{"id":"VWZ3DsYGcYS8","executionInfo":{"status":"ok","timestamp":1715591987421,"user_tz":-330,"elapsed":35,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"outputId":"bb91e2c4-bb02-4273-ceeb-74479dcc14af","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["PassengerId      0\n","Survived         0\n","Pclass           0\n","Name             0\n","Sex              0\n","Age            177\n","SibSp            0\n","Parch            0\n","Ticket           0\n","Fare             0\n","Cabin          687\n","Embarked         2\n","dtype: int64"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["data['Age'].unique()"],"metadata":{"id":"HoKdDGK1bY3I","executionInfo":{"status":"ok","timestamp":1715591987422,"user_tz":-330,"elapsed":33,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"5897808b-9fac-4ed4-ed5d-d4f43c66bb23"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([22.  , 38.  , 26.  , 35.  ,   nan, 54.  ,  2.  , 27.  , 14.  ,\n","        4.  , 58.  , 20.  , 39.  , 55.  , 31.  , 34.  , 15.  , 28.  ,\n","        8.  , 19.  , 40.  , 66.  , 42.  , 21.  , 18.  ,  3.  ,  7.  ,\n","       49.  , 29.  , 65.  , 28.5 ,  5.  , 11.  , 45.  , 17.  , 32.  ,\n","       16.  , 25.  ,  0.83, 30.  , 33.  , 23.  , 24.  , 46.  , 59.  ,\n","       71.  , 37.  , 47.  , 14.5 , 70.5 , 32.5 , 12.  ,  9.  , 36.5 ,\n","       51.  , 55.5 , 40.5 , 44.  ,  1.  , 61.  , 56.  , 50.  , 36.  ,\n","       45.5 , 20.5 , 62.  , 41.  , 52.  , 63.  , 23.5 ,  0.92, 43.  ,\n","       60.  , 10.  , 64.  , 13.  , 48.  ,  0.75, 53.  , 57.  , 80.  ,\n","       70.  , 24.5 ,  6.  ,  0.67, 30.5 ,  0.42, 34.5 , 74.  ])"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["data1=data.drop(['PassengerId','Name','Ticket','Cabin',],axis=1)\n","data1"],"metadata":{"id":"6dnWmIoBdo5p","executionInfo":{"status":"ok","timestamp":1715591987422,"user_tz":-330,"elapsed":31,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"colab":{"base_uri":"https://localhost:8080/","height":423},"outputId":"1b66b682-56fd-4f6b-a4a9-234b55b6f381"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Survived  Pclass     Sex   Age  SibSp  Parch     Fare Embarked\n","0           0       3    male  22.0      1      0   7.2500        S\n","1           1       1  female  38.0      1      0  71.2833        C\n","2           1       3  female  26.0      0      0   7.9250        S\n","3           1       1  female  35.0      1      0  53.1000        S\n","4           0       3    male  35.0      0      0   8.0500        S\n","..        ...     ...     ...   ...    ...    ...      ...      ...\n","886         0       2    male  27.0      0      0  13.0000        S\n","887         1       1  female  19.0      0      0  30.0000        S\n","888         0       3  female   NaN      1      2  23.4500        S\n","889         1       1    male  26.0      0      0  30.0000        C\n","890         0       3    male  32.0      0      0   7.7500        Q\n","\n","[891 rows x 8 columns]"],"text/html":["\n","  <div id=\"df-c4b82ed4-c3de-4213-8e92-19d220a31797\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>male</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.2500</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>female</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>71.2833</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>female</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.9250</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>female</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>53.1000</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>male</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.0500</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>886</th>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>male</td>\n","      <td>27.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>13.0000</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>887</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>female</td>\n","      <td>19.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>30.0000</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>888</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>female</td>\n","      <td>NaN</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>23.4500</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>889</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>male</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>30.0000</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>890</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>male</td>\n","      <td>32.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.7500</td>\n","      <td>Q</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>891 rows Ã— 8 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c4b82ed4-c3de-4213-8e92-19d220a31797')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c4b82ed4-c3de-4213-8e92-19d220a31797 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c4b82ed4-c3de-4213-8e92-19d220a31797');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e0ceac7c-76cb-4fb4-93c0-aa8e96087136\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e0ceac7c-76cb-4fb4-93c0-aa8e96087136')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e0ceac7c-76cb-4fb4-93c0-aa8e96087136 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_988a7c3d-7601-4e5a-a033-0291d10d490a\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data1')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_988a7c3d-7601-4e5a-a033-0291d10d490a button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('data1');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data1","summary":"{\n  \"name\": \"data1\",\n  \"rows\": 891,\n  \"fields\": [\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.526497332334042,\n        \"min\": 0.42,\n        \"max\": 80.0,\n        \"num_unique_values\": 88,\n        \"samples\": [\n          0.75,\n          22.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49.6934285971809,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          11.2417,\n          51.8625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"S\",\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["data1.info()"],"metadata":{"id":"C7WVkSK-eyLN","executionInfo":{"status":"ok","timestamp":1715591987422,"user_tz":-330,"elapsed":30,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"e3796d0f-755f-4df1-ce7b-acac664b409e"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 891 entries, 0 to 890\n","Data columns (total 8 columns):\n"," #   Column    Non-Null Count  Dtype  \n","---  ------    --------------  -----  \n"," 0   Survived  891 non-null    int64  \n"," 1   Pclass    891 non-null    int64  \n"," 2   Sex       891 non-null    object \n"," 3   Age       714 non-null    float64\n"," 4   SibSp     891 non-null    int64  \n"," 5   Parch     891 non-null    int64  \n"," 6   Fare      891 non-null    float64\n"," 7   Embarked  889 non-null    object \n","dtypes: float64(2), int64(4), object(2)\n","memory usage: 55.8+ KB\n"]}]},{"cell_type":"code","source":["data1['Sex']=data1['Sex'].map({'male':1,'female':0})\n","data1\n","# map is used to correctly map the given variables\n","# Here we map the sex variable and replace 1 for male and 0 fopr female"],"metadata":{"id":"6Av_c-PNfLCz","executionInfo":{"status":"ok","timestamp":1715591987871,"user_tz":-330,"elapsed":11,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"colab":{"base_uri":"https://localhost:8080/","height":423},"outputId":"ab67fcc0-4403-41a1-a078-fb50f873fdbc"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Survived  Pclass  Sex   Age  SibSp  Parch     Fare Embarked\n","0           0       3    1  22.0      1      0   7.2500        S\n","1           1       1    0  38.0      1      0  71.2833        C\n","2           1       3    0  26.0      0      0   7.9250        S\n","3           1       1    0  35.0      1      0  53.1000        S\n","4           0       3    1  35.0      0      0   8.0500        S\n","..        ...     ...  ...   ...    ...    ...      ...      ...\n","886         0       2    1  27.0      0      0  13.0000        S\n","887         1       1    0  19.0      0      0  30.0000        S\n","888         0       3    0   NaN      1      2  23.4500        S\n","889         1       1    1  26.0      0      0  30.0000        C\n","890         0       3    1  32.0      0      0   7.7500        Q\n","\n","[891 rows x 8 columns]"],"text/html":["\n","  <div id=\"df-c3da7ff7-fc46-41fd-b806-08f40eafe0df\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.2500</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>71.2833</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.9250</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>53.1000</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.0500</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>886</th>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>27.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>13.0000</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>887</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>19.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>30.0000</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>888</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>23.4500</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>889</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>30.0000</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>890</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>32.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.7500</td>\n","      <td>Q</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>891 rows Ã— 8 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c3da7ff7-fc46-41fd-b806-08f40eafe0df')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c3da7ff7-fc46-41fd-b806-08f40eafe0df button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c3da7ff7-fc46-41fd-b806-08f40eafe0df');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-4476df7f-e079-4d46-9cbd-13d1aabee73b\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4476df7f-e079-4d46-9cbd-13d1aabee73b')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-4476df7f-e079-4d46-9cbd-13d1aabee73b button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_d2294eea-aacf-4b12-9fca-a82da7347041\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data1')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_d2294eea-aacf-4b12-9fca-a82da7347041 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('data1');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data1","summary":"{\n  \"name\": \"data1\",\n  \"rows\": 891,\n  \"fields\": [\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.526497332334042,\n        \"min\": 0.42,\n        \"max\": 80.0,\n        \"num_unique_values\": 88,\n        \"samples\": [\n          0.75,\n          22.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49.6934285971809,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          11.2417,\n          51.8625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"S\",\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["data1['Parch'].unique()"],"metadata":{"id":"CFkMxT7rgHig","executionInfo":{"status":"ok","timestamp":1715591987872,"user_tz":-330,"elapsed":10,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"b2dbc9ec-fda3-4852-a0dd-0cea5a45605c"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 1, 2, 5, 3, 4, 6])"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["import seaborn as sns\n","sns.boxplot(data1.Age)"],"metadata":{"id":"MTI7_fsHpIhh","executionInfo":{"status":"ok","timestamp":1715591989434,"user_tz":-330,"elapsed":1570,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"colab":{"base_uri":"https://localhost:8080/","height":429},"outputId":"106d95ed-c4a2-4fd0-b8eb-80376b4bbad3"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: ylabel='Age'>"]},"metadata":{},"execution_count":16},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["data1.groupby('Survived').count()"],"metadata":{"id":"w6wYUTT5qA83","executionInfo":{"status":"ok","timestamp":1715591989435,"user_tz":-330,"elapsed":17,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"outputId":"e8944cf0-7dd7-44de-f1f2-c543a7ca0528","colab":{"base_uri":"https://localhost:8080/","height":143}},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["          Pclass  Sex  Age  SibSp  Parch  Fare  Embarked\n","Survived                                                \n","0            549  549  424    549    549   549       549\n","1            342  342  290    342    342   342       340"],"text/html":["\n","  <div id=\"df-1411398f-a85e-455b-b97e-cf983bda8036\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","    </tr>\n","    <tr>\n","      <th>Survived</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>549</td>\n","      <td>549</td>\n","      <td>424</td>\n","      <td>549</td>\n","      <td>549</td>\n","      <td>549</td>\n","      <td>549</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>342</td>\n","      <td>342</td>\n","      <td>290</td>\n","      <td>342</td>\n","      <td>342</td>\n","      <td>342</td>\n","      <td>340</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1411398f-a85e-455b-b97e-cf983bda8036')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1411398f-a85e-455b-b97e-cf983bda8036 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1411398f-a85e-455b-b97e-cf983bda8036');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-8a27aa0b-ec52-47cb-9a87-cd63d009b628\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8a27aa0b-ec52-47cb-9a87-cd63d009b628')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-8a27aa0b-ec52-47cb-9a87-cd63d009b628 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"data1\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 146,\n        \"min\": 342,\n        \"max\": 549,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          342,\n          549\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 146,\n        \"min\": 342,\n        \"max\": 549,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          342,\n          549\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 94,\n        \"min\": 290,\n        \"max\": 424,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          290,\n          424\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 146,\n        \"min\": 342,\n        \"max\": 549,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          342,\n          549\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 146,\n        \"min\": 342,\n        \"max\": 549,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          342,\n          549\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 146,\n        \"min\": 342,\n        \"max\": 549,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          342,\n          549\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 147,\n        \"min\": 340,\n        \"max\": 549,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          340,\n          549\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["# Visualisation for Age\n","import matplotlib.pyplot as plt\n","plt.hist(data1.Age)\n","#HNiudstgram accepts only one Numerical variable\n"],"metadata":{"id":"zHTsphzOrseP","executionInfo":{"status":"ok","timestamp":1715591990237,"user_tz":-330,"elapsed":817,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"outputId":"6a59f463-fcd7-4be5-f90f-dfb628962bb9","colab":{"base_uri":"https://localhost:8080/","height":503}},"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(array([ 54.,  46., 177., 169., 118.,  70.,  45.,  24.,   9.,   2.]),\n"," array([ 0.42 ,  8.378, 16.336, 24.294, 32.252, 40.21 , 48.168, 56.126,\n","        64.084, 72.042, 80.   ]),\n"," <BarContainer object of 10 artists>)"]},"metadata":{},"execution_count":18},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["nv=data1['Age'].mean()\n","data1['Age'].fillna(30,inplace=True)\n","data1\n","# fillna mwthod is used to replace the given value instead of Nan"],"metadata":{"id":"AhAXv2d_srUG","executionInfo":{"status":"ok","timestamp":1715591990241,"user_tz":-330,"elapsed":42,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"outputId":"b8a534a7-181b-42c0-8972-0a5557164209","colab":{"base_uri":"https://localhost:8080/","height":423}},"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Survived  Pclass  Sex   Age  SibSp  Parch     Fare Embarked\n","0           0       3    1  22.0      1      0   7.2500        S\n","1           1       1    0  38.0      1      0  71.2833        C\n","2           1       3    0  26.0      0      0   7.9250        S\n","3           1       1    0  35.0      1      0  53.1000        S\n","4           0       3    1  35.0      0      0   8.0500        S\n","..        ...     ...  ...   ...    ...    ...      ...      ...\n","886         0       2    1  27.0      0      0  13.0000        S\n","887         1       1    0  19.0      0      0  30.0000        S\n","888         0       3    0  30.0      1      2  23.4500        S\n","889         1       1    1  26.0      0      0  30.0000        C\n","890         0       3    1  32.0      0      0   7.7500        Q\n","\n","[891 rows x 8 columns]"],"text/html":["\n","  <div id=\"df-e92106af-d696-40fa-98b5-1ff86d96eedb\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.2500</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>71.2833</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.9250</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>53.1000</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.0500</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>886</th>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>27.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>13.0000</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>887</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>19.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>30.0000</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>888</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>30.0</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>23.4500</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>889</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>30.0000</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>890</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>32.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.7500</td>\n","      <td>Q</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>891 rows Ã— 8 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e92106af-d696-40fa-98b5-1ff86d96eedb')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-e92106af-d696-40fa-98b5-1ff86d96eedb button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e92106af-d696-40fa-98b5-1ff86d96eedb');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-964aa6e9-74f9-42fe-b169-ca8cf0c6f3a7\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-964aa6e9-74f9-42fe-b169-ca8cf0c6f3a7')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-964aa6e9-74f9-42fe-b169-ca8cf0c6f3a7 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_663f2c95-a1b1-4e09-a7c6-becdd0b6c83a\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data1')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_663f2c95-a1b1-4e09-a7c6-becdd0b6c83a button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('data1');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data1","summary":"{\n  \"name\": \"data1\",\n  \"rows\": 891,\n  \"fields\": [\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.002570039820952,\n        \"min\": 0.42,\n        \"max\": 80.0,\n        \"num_unique_values\": 88,\n        \"samples\": [\n          0.75,\n          22.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49.6934285971809,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          11.2417,\n          51.8625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"S\",\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["data1.isnull().sum()"],"metadata":{"id":"8bhLv7nsvudw","executionInfo":{"status":"ok","timestamp":1715591990243,"user_tz":-330,"elapsed":43,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"outputId":"76596282-f0f1-4318-f8e9-8c6827169785","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Survived    0\n","Pclass      0\n","Sex         0\n","Age         0\n","SibSp       0\n","Parch       0\n","Fare        0\n","Embarked    2\n","dtype: int64"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["data['Age'].unique()"],"metadata":{"id":"sDQqRUjCuUyt","executionInfo":{"status":"ok","timestamp":1715591990243,"user_tz":-330,"elapsed":40,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"outputId":"5b3dc024-1f8f-40c5-ede1-e2e70660c09b","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([22.  , 38.  , 26.  , 35.  ,   nan, 54.  ,  2.  , 27.  , 14.  ,\n","        4.  , 58.  , 20.  , 39.  , 55.  , 31.  , 34.  , 15.  , 28.  ,\n","        8.  , 19.  , 40.  , 66.  , 42.  , 21.  , 18.  ,  3.  ,  7.  ,\n","       49.  , 29.  , 65.  , 28.5 ,  5.  , 11.  , 45.  , 17.  , 32.  ,\n","       16.  , 25.  ,  0.83, 30.  , 33.  , 23.  , 24.  , 46.  , 59.  ,\n","       71.  , 37.  , 47.  , 14.5 , 70.5 , 32.5 , 12.  ,  9.  , 36.5 ,\n","       51.  , 55.5 , 40.5 , 44.  ,  1.  , 61.  , 56.  , 50.  , 36.  ,\n","       45.5 , 20.5 , 62.  , 41.  , 52.  , 63.  , 23.5 ,  0.92, 43.  ,\n","       60.  , 10.  , 64.  , 13.  , 48.  ,  0.75, 53.  , 57.  , 80.  ,\n","       70.  , 24.5 ,  6.  ,  0.67, 30.5 ,  0.42, 34.5 , 74.  ])"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["data1['Age'].unique()"],"metadata":{"id":"pN71lwdLtYL_","executionInfo":{"status":"ok","timestamp":1715591990244,"user_tz":-330,"elapsed":38,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"outputId":"0ff6479a-7d29-4097-85b9-2398b485b09f","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([22.  , 38.  , 26.  , 35.  , 30.  , 54.  ,  2.  , 27.  , 14.  ,\n","        4.  , 58.  , 20.  , 39.  , 55.  , 31.  , 34.  , 15.  , 28.  ,\n","        8.  , 19.  , 40.  , 66.  , 42.  , 21.  , 18.  ,  3.  ,  7.  ,\n","       49.  , 29.  , 65.  , 28.5 ,  5.  , 11.  , 45.  , 17.  , 32.  ,\n","       16.  , 25.  ,  0.83, 33.  , 23.  , 24.  , 46.  , 59.  , 71.  ,\n","       37.  , 47.  , 14.5 , 70.5 , 32.5 , 12.  ,  9.  , 36.5 , 51.  ,\n","       55.5 , 40.5 , 44.  ,  1.  , 61.  , 56.  , 50.  , 36.  , 45.5 ,\n","       20.5 , 62.  , 41.  , 52.  , 63.  , 23.5 ,  0.92, 43.  , 60.  ,\n","       10.  , 64.  , 13.  , 48.  ,  0.75, 53.  , 57.  , 80.  , 70.  ,\n","       24.5 ,  6.  ,  0.67, 30.5 ,  0.42, 34.5 , 74.  ])"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["nv=data1['Embarked'].mode()\n","nv\n","data1['Embarked'].fillna('S',inplace=True)\n","data1"],"metadata":{"id":"LELGWWYPv1p1","executionInfo":{"status":"ok","timestamp":1715591990244,"user_tz":-330,"elapsed":34,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"outputId":"9e419eec-5f65-4ba8-de52-b7015463f834","colab":{"base_uri":"https://localhost:8080/","height":423}},"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Survived  Pclass  Sex   Age  SibSp  Parch     Fare Embarked\n","0           0       3    1  22.0      1      0   7.2500        S\n","1           1       1    0  38.0      1      0  71.2833        C\n","2           1       3    0  26.0      0      0   7.9250        S\n","3           1       1    0  35.0      1      0  53.1000        S\n","4           0       3    1  35.0      0      0   8.0500        S\n","..        ...     ...  ...   ...    ...    ...      ...      ...\n","886         0       2    1  27.0      0      0  13.0000        S\n","887         1       1    0  19.0      0      0  30.0000        S\n","888         0       3    0  30.0      1      2  23.4500        S\n","889         1       1    1  26.0      0      0  30.0000        C\n","890         0       3    1  32.0      0      0   7.7500        Q\n","\n","[891 rows x 8 columns]"],"text/html":["\n","  <div id=\"df-9524c774-7498-4d00-ab21-ac80c6dcb83b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.2500</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>71.2833</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.9250</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>53.1000</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.0500</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>886</th>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>27.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>13.0000</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>887</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>19.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>30.0000</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>888</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>30.0</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>23.4500</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>889</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>30.0000</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>890</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>32.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.7500</td>\n","      <td>Q</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>891 rows Ã— 8 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9524c774-7498-4d00-ab21-ac80c6dcb83b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-9524c774-7498-4d00-ab21-ac80c6dcb83b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-9524c774-7498-4d00-ab21-ac80c6dcb83b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-1d3b2700-a5e1-4110-882b-6cedfa8d5389\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1d3b2700-a5e1-4110-882b-6cedfa8d5389')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-1d3b2700-a5e1-4110-882b-6cedfa8d5389 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_9788b269-3a82-4845-941b-96ff0ca3aca1\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data1')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_9788b269-3a82-4845-941b-96ff0ca3aca1 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('data1');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data1","summary":"{\n  \"name\": \"data1\",\n  \"rows\": 891,\n  \"fields\": [\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.002570039820952,\n        \"min\": 0.42,\n        \"max\": 80.0,\n        \"num_unique_values\": 88,\n        \"samples\": [\n          0.75,\n          22.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49.6934285971809,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          11.2417,\n          51.8625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"S\",\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["data1.isnull().sum()"],"metadata":{"id":"T163WsNiwfSt","executionInfo":{"status":"ok","timestamp":1715591990245,"user_tz":-330,"elapsed":34,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"outputId":"571212eb-b60a-433f-ac44-0a4875a2b600","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Survived    0\n","Pclass      0\n","Sex         0\n","Age         0\n","SibSp       0\n","Parch       0\n","Fare        0\n","Embarked    0\n","dtype: int64"]},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["data1.groupby('Age').count().tail(20)"],"metadata":{"id":"cSjpo4r-xc3s","executionInfo":{"status":"ok","timestamp":1715591990246,"user_tz":-330,"elapsed":31,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"outputId":"329cc40f-ec57-4acc-e1aa-833c32997bde","colab":{"base_uri":"https://localhost:8080/","height":707}},"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      Survived  Pclass  Sex  SibSp  Parch  Fare  Embarked\n","Age                                                      \n","53.0         1       1    1      1      1     1         1\n","54.0         8       8    8      8      8     8         8\n","55.0         2       2    2      2      2     2         2\n","55.5         1       1    1      1      1     1         1\n","56.0         4       4    4      4      4     4         4\n","57.0         2       2    2      2      2     2         2\n","58.0         5       5    5      5      5     5         5\n","59.0         2       2    2      2      2     2         2\n","60.0         4       4    4      4      4     4         4\n","61.0         3       3    3      3      3     3         3\n","62.0         4       4    4      4      4     4         4\n","63.0         2       2    2      2      2     2         2\n","64.0         2       2    2      2      2     2         2\n","65.0         3       3    3      3      3     3         3\n","66.0         1       1    1      1      1     1         1\n","70.0         2       2    2      2      2     2         2\n","70.5         1       1    1      1      1     1         1\n","71.0         2       2    2      2      2     2         2\n","74.0         1       1    1      1      1     1         1\n","80.0         1       1    1      1      1     1         1"],"text/html":["\n","  <div id=\"df-ad951766-be1f-40ec-8bb6-78fb5045f065\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","    </tr>\n","    <tr>\n","      <th>Age</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>53.0</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>54.0</th>\n","      <td>8</td>\n","      <td>8</td>\n","      <td>8</td>\n","      <td>8</td>\n","      <td>8</td>\n","      <td>8</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>55.0</th>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>55.5</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>56.0</th>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>57.0</th>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>58.0</th>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>59.0</th>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>60.0</th>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>61.0</th>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>62.0</th>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>63.0</th>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>64.0</th>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>65.0</th>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>66.0</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>70.0</th>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>70.5</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>71.0</th>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>74.0</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>80.0</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ad951766-be1f-40ec-8bb6-78fb5045f065')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ad951766-be1f-40ec-8bb6-78fb5045f065 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ad951766-be1f-40ec-8bb6-78fb5045f065');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-099bcd2e-aafd-4f90-9d69-2311ce57d4b6\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-099bcd2e-aafd-4f90-9d69-2311ce57d4b6')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-099bcd2e-aafd-4f90-9d69-2311ce57d4b6 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"data1\",\n  \"rows\": 20,\n  \"fields\": [\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.372423724864665,\n        \"min\": 53.0,\n        \"max\": 80.0,\n        \"num_unique_values\": 20,\n        \"samples\": [\n          53.0,\n          71.0,\n          70.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 8,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1,\n          8,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 8,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1,\n          8,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 8,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1,\n          8,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 8,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1,\n          8,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 8,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1,\n          8,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 8,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1,\n          8,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 8,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1,\n          8,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["plt.hist(data1.Age)"],"metadata":{"id":"hHtDlijSySY7","executionInfo":{"status":"ok","timestamp":1715591990246,"user_tz":-330,"elapsed":30,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"colab":{"base_uri":"https://localhost:8080/","height":503},"outputId":"ebcfdc28-9cad-41e9-8423-ea205163fb0a"},"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(array([ 54.,  46., 177., 346., 118.,  70.,  45.,  24.,   9.,   2.]),\n"," array([ 0.42 ,  8.378, 16.336, 24.294, 32.252, 40.21 , 48.168, 56.126,\n","        64.084, 72.042, 80.   ]),\n"," <BarContainer object of 10 artists>)"]},"metadata":{},"execution_count":26},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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\n"},"metadata":{}}]},{"cell_type":"code","source":["data1['Age']=data1['Age'].mask(data1['Age']>60,60)"],"metadata":{"id":"SWZjWjK9zVM0","executionInfo":{"status":"ok","timestamp":1715591990247,"user_tz":-330,"elapsed":27,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","source":["plt.hist(data1.Age)"],"metadata":{"id":"qeI9_v0QzzSr","executionInfo":{"status":"ok","timestamp":1715591990827,"user_tz":-330,"elapsed":607,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"outputId":"6897f7c3-db45-4f98-a737-4f8dda5a2899","colab":{"base_uri":"https://localhost:8080/","height":503}},"execution_count":28,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(array([ 47.,  22.,  70., 138., 309., 110.,  66.,  49.,  38.,  42.]),\n"," array([ 0.42 ,  6.378, 12.336, 18.294, 24.252, 30.21 , 36.168, 42.126,\n","        48.084, 54.042, 60.   ]),\n"," <BarContainer object of 10 artists>)"]},"metadata":{},"execution_count":28},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["data1['Pclass']=data1['Pclass'].map({1:'F',2:'S',3:'T'})\n","data1"],"metadata":{"id":"s1zLHSmt12xs","executionInfo":{"status":"ok","timestamp":1715591990828,"user_tz":-330,"elapsed":26,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"outputId":"0ed876a8-800d-46f6-cbaf-df7910d1a0c6","colab":{"base_uri":"https://localhost:8080/","height":423}},"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Survived Pclass  Sex   Age  SibSp  Parch     Fare Embarked\n","0           0      T    1  22.0      1      0   7.2500        S\n","1           1      F    0  38.0      1      0  71.2833        C\n","2           1      T    0  26.0      0      0   7.9250        S\n","3           1      F    0  35.0      1      0  53.1000        S\n","4           0      T    1  35.0      0      0   8.0500        S\n","..        ...    ...  ...   ...    ...    ...      ...      ...\n","886         0      S    1  27.0      0      0  13.0000        S\n","887         1      F    0  19.0      0      0  30.0000        S\n","888         0      T    0  30.0      1      2  23.4500        S\n","889         1      F    1  26.0      0      0  30.0000        C\n","890         0      T    1  32.0      0      0   7.7500        Q\n","\n","[891 rows x 8 columns]"],"text/html":["\n","  <div id=\"df-2dea6b50-5c53-47a1-a530-2392ce25dd21\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>T</td>\n","      <td>1</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.2500</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>F</td>\n","      <td>0</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>71.2833</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>T</td>\n","      <td>0</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.9250</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>F</td>\n","      <td>0</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>53.1000</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>T</td>\n","      <td>1</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.0500</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>886</th>\n","      <td>0</td>\n","      <td>S</td>\n","      <td>1</td>\n","      <td>27.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>13.0000</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>887</th>\n","      <td>1</td>\n","      <td>F</td>\n","      <td>0</td>\n","      <td>19.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>30.0000</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>888</th>\n","      <td>0</td>\n","      <td>T</td>\n","      <td>0</td>\n","      <td>30.0</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>23.4500</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>889</th>\n","      <td>1</td>\n","      <td>F</td>\n","      <td>1</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>30.0000</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>890</th>\n","      <td>0</td>\n","      <td>T</td>\n","      <td>1</td>\n","      <td>32.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.7500</td>\n","      <td>Q</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>891 rows Ã— 8 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2dea6b50-5c53-47a1-a530-2392ce25dd21')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2dea6b50-5c53-47a1-a530-2392ce25dd21 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2dea6b50-5c53-47a1-a530-2392ce25dd21');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-690d9838-13f6-45d3-bb5d-aae556bc1c2b\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-690d9838-13f6-45d3-bb5d-aae556bc1c2b')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-690d9838-13f6-45d3-bb5d-aae556bc1c2b button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_32522e10-ca3e-46cf-a29e-3dc002d9675d\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data1')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_32522e10-ca3e-46cf-a29e-3dc002d9675d button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('data1');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data1","summary":"{\n  \"name\": \"data1\",\n  \"rows\": 891,\n  \"fields\": [\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"T\",\n          \"F\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.591580394122483,\n        \"min\": 0.42,\n        \"max\": 60.0,\n        \"num_unique_values\": 77,\n        \"samples\": [\n          30.0,\n          16.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49.6934285971809,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          11.2417,\n          51.8625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"S\",\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["data1=pandas.get_dummies(data1,dtype='int')\n","data1"],"metadata":{"id":"FRX5fWbc2-G6","executionInfo":{"status":"ok","timestamp":1715591990829,"user_tz":-330,"elapsed":26,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"outputId":"7a036198-6ca6-4b17-b92b-90f27ff95dc4","colab":{"base_uri":"https://localhost:8080/","height":443}},"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Survived  Sex   Age  SibSp  Parch     Fare  Pclass_F  Pclass_S  Pclass_T  \\\n","0           0    1  22.0      1      0   7.2500         0         0         1   \n","1           1    0  38.0      1      0  71.2833         1         0         0   \n","2           1    0  26.0      0      0   7.9250         0         0         1   \n","3           1    0  35.0      1      0  53.1000         1         0         0   \n","4           0    1  35.0      0      0   8.0500         0         0         1   \n","..        ...  ...   ...    ...    ...      ...       ...       ...       ...   \n","886         0    1  27.0      0      0  13.0000         0         1         0   \n","887         1    0  19.0      0      0  30.0000         1         0         0   \n","888         0    0  30.0      1      2  23.4500         0         0         1   \n","889         1    1  26.0      0      0  30.0000         1         0         0   \n","890         0    1  32.0      0      0   7.7500         0         0         1   \n","\n","     Embarked_C  Embarked_Q  Embarked_S  \n","0             0           0           1  \n","1             1           0           0  \n","2             0           0           1  \n","3             0           0           1  \n","4             0           0           1  \n","..          ...         ...         ...  \n","886           0           0           1  \n","887           0           0           1  \n","888           0           0           1  \n","889           1           0           0  \n","890           0           1           0  \n","\n","[891 rows x 12 columns]"],"text/html":["\n","  <div id=\"df-21810bca-079f-4b80-9e0b-b421cb526a64\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Pclass_F</th>\n","      <th>Pclass_S</th>\n","      <th>Pclass_T</th>\n","      <th>Embarked_C</th>\n","      <th>Embarked_Q</th>\n","      <th>Embarked_S</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.2500</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>71.2833</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.9250</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>53.1000</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.0500</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>886</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>27.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>13.0000</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>887</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>19.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>30.0000</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>888</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>30.0</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>23.4500</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>889</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>30.0000</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>890</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>32.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.7500</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>891 rows Ã— 12 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-21810bca-079f-4b80-9e0b-b421cb526a64')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-21810bca-079f-4b80-9e0b-b421cb526a64 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-21810bca-079f-4b80-9e0b-b421cb526a64');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e181c01e-aad8-40e5-95d3-b4f0e060e3a7\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e181c01e-aad8-40e5-95d3-b4f0e060e3a7')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e181c01e-aad8-40e5-95d3-b4f0e060e3a7 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_572c4b1e-ba35-4a00-996f-a640370b546d\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data1')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_572c4b1e-ba35-4a00-996f-a640370b546d button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('data1');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data1","summary":"{\n  \"name\": \"data1\",\n  \"rows\": 891,\n  \"fields\": [\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.591580394122483,\n        \"min\": 0.42,\n        \"max\": 60.0,\n        \"num_unique_values\": 77,\n        \"samples\": [\n          30.0,\n          16.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49.6934285971809,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          11.2417,\n          51.8625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass_F\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass_S\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass_T\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked_C\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked_Q\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked_S\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":30}]},{"cell_type":"code","source":["cor=data1.corr()\n","cor"],"metadata":{"id":"dtBIWzzORKgZ","executionInfo":{"status":"ok","timestamp":1715591990830,"user_tz":-330,"elapsed":25,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"outputId":"358a8048-7ff9-4abb-e6b5-8aa76b3181ff","colab":{"base_uri":"https://localhost:8080/","height":445}},"execution_count":31,"outputs":[{"output_type":"execute_result","data":{"text/plain":["            Survived       Sex       Age     SibSp     Parch      Fare  \\\n","Survived    1.000000 -0.543351 -0.069138 -0.035322  0.081629  0.257307   \n","Sex        -0.543351  1.000000  0.080199 -0.114631 -0.245489 -0.182333   \n","Age        -0.069138  0.080199  1.000000 -0.235794 -0.184050  0.092537   \n","SibSp      -0.035322 -0.114631 -0.235794  1.000000  0.414838  0.159651   \n","Parch       0.081629 -0.245489 -0.184050  0.414838  1.000000  0.216225   \n","Fare        0.257307 -0.182333  0.092537  0.159651  0.216225  1.000000   \n","Pclass_F    0.285904 -0.098013  0.319364 -0.054582 -0.017633  0.591711   \n","Pclass_S    0.093349 -0.064746  0.007173 -0.055932 -0.000734 -0.118557   \n","Pclass_T   -0.322308  0.137143 -0.281003  0.092548  0.015790 -0.413333   \n","Embarked_C  0.168240 -0.082853  0.032926 -0.059528 -0.011069  0.269335   \n","Embarked_Q  0.003650 -0.074115 -0.012373 -0.026354 -0.081228 -0.117216   \n","Embarked_S -0.149683  0.119224 -0.021058  0.068734  0.060814 -0.162184   \n","\n","            Pclass_F  Pclass_S  Pclass_T  Embarked_C  Embarked_Q  Embarked_S  \n","Survived    0.285904  0.093349 -0.322308    0.168240    0.003650   -0.149683  \n","Sex        -0.098013 -0.064746  0.137143   -0.082853   -0.074115    0.119224  \n","Age         0.319364  0.007173 -0.281003    0.032926   -0.012373   -0.021058  \n","SibSp      -0.054582 -0.055932  0.092548   -0.059528   -0.026354    0.068734  \n","Parch      -0.017633 -0.000734  0.015790   -0.011069   -0.081228    0.060814  \n","Fare        0.591711 -0.118557 -0.413333    0.269335   -0.117216   -0.162184  \n","Pclass_F    1.000000 -0.288585 -0.626738    0.296423   -0.155342   -0.161921  \n","Pclass_S   -0.288585  1.000000 -0.565210   -0.125416   -0.127301    0.189980  \n","Pclass_T   -0.626738 -0.565210  1.000000   -0.153329    0.237449   -0.015104  \n","Embarked_C  0.296423 -0.125416 -0.153329    1.000000   -0.148258   -0.782742  \n","Embarked_Q -0.155342 -0.127301  0.237449   -0.148258    1.000000   -0.499421  \n","Embarked_S -0.161921  0.189980 -0.015104   -0.782742   -0.499421    1.000000  "],"text/html":["\n","  <div id=\"df-6a3110fb-b69c-4891-a483-f894b602af5f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Pclass_F</th>\n","      <th>Pclass_S</th>\n","      <th>Pclass_T</th>\n","      <th>Embarked_C</th>\n","      <th>Embarked_Q</th>\n","      <th>Embarked_S</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Survived</th>\n","      <td>1.000000</td>\n","      <td>-0.543351</td>\n","      <td>-0.069138</td>\n","      <td>-0.035322</td>\n","      <td>0.081629</td>\n","      <td>0.257307</td>\n","      <td>0.285904</td>\n","      <td>0.093349</td>\n","      <td>-0.322308</td>\n","      <td>0.168240</td>\n","      <td>0.003650</td>\n","      <td>-0.149683</td>\n","    </tr>\n","    <tr>\n","      <th>Sex</th>\n","      <td>-0.543351</td>\n","      <td>1.000000</td>\n","      <td>0.080199</td>\n","      <td>-0.114631</td>\n","      <td>-0.245489</td>\n","      <td>-0.182333</td>\n","      <td>-0.098013</td>\n","      <td>-0.064746</td>\n","      <td>0.137143</td>\n","      <td>-0.082853</td>\n","      <td>-0.074115</td>\n","      <td>0.119224</td>\n","    </tr>\n","    <tr>\n","      <th>Age</th>\n","      <td>-0.069138</td>\n","      <td>0.080199</td>\n","      <td>1.000000</td>\n","      <td>-0.235794</td>\n","      <td>-0.184050</td>\n","      <td>0.092537</td>\n","      <td>0.319364</td>\n","      <td>0.007173</td>\n","      <td>-0.281003</td>\n","      <td>0.032926</td>\n","      <td>-0.012373</td>\n","      <td>-0.021058</td>\n","    </tr>\n","    <tr>\n","      <th>SibSp</th>\n","      <td>-0.035322</td>\n","      <td>-0.114631</td>\n","      <td>-0.235794</td>\n","      <td>1.000000</td>\n","      <td>0.414838</td>\n","      <td>0.159651</td>\n","      <td>-0.054582</td>\n","      <td>-0.055932</td>\n","      <td>0.092548</td>\n","      <td>-0.059528</td>\n","      <td>-0.026354</td>\n","      <td>0.068734</td>\n","    </tr>\n","    <tr>\n","      <th>Parch</th>\n","      <td>0.081629</td>\n","      <td>-0.245489</td>\n","      <td>-0.184050</td>\n","      <td>0.414838</td>\n","      <td>1.000000</td>\n","      <td>0.216225</td>\n","      <td>-0.017633</td>\n","      <td>-0.000734</td>\n","      <td>0.015790</td>\n","      <td>-0.011069</td>\n","      <td>-0.081228</td>\n","      <td>0.060814</td>\n","    </tr>\n","    <tr>\n","      <th>Fare</th>\n","      <td>0.257307</td>\n","      <td>-0.182333</td>\n","      <td>0.092537</td>\n","      <td>0.159651</td>\n","      <td>0.216225</td>\n","      <td>1.000000</td>\n","      <td>0.591711</td>\n","      <td>-0.118557</td>\n","      <td>-0.413333</td>\n","      <td>0.269335</td>\n","      <td>-0.117216</td>\n","      <td>-0.162184</td>\n","    </tr>\n","    <tr>\n","      <th>Pclass_F</th>\n","      <td>0.285904</td>\n","      <td>-0.098013</td>\n","      <td>0.319364</td>\n","      <td>-0.054582</td>\n","      <td>-0.017633</td>\n","      <td>0.591711</td>\n","      <td>1.000000</td>\n","      <td>-0.288585</td>\n","      <td>-0.626738</td>\n","      <td>0.296423</td>\n","      <td>-0.155342</td>\n","      <td>-0.161921</td>\n","    </tr>\n","    <tr>\n","      <th>Pclass_S</th>\n","      <td>0.093349</td>\n","      <td>-0.064746</td>\n","      <td>0.007173</td>\n","      <td>-0.055932</td>\n","      <td>-0.000734</td>\n","      <td>-0.118557</td>\n","      <td>-0.288585</td>\n","      <td>1.000000</td>\n","      <td>-0.565210</td>\n","      <td>-0.125416</td>\n","      <td>-0.127301</td>\n","      <td>0.189980</td>\n","    </tr>\n","    <tr>\n","      <th>Pclass_T</th>\n","      <td>-0.322308</td>\n","      <td>0.137143</td>\n","      <td>-0.281003</td>\n","      <td>0.092548</td>\n","      <td>0.015790</td>\n","      <td>-0.413333</td>\n","      <td>-0.626738</td>\n","      <td>-0.565210</td>\n","      <td>1.000000</td>\n","      <td>-0.153329</td>\n","      <td>0.237449</td>\n","      <td>-0.015104</td>\n","    </tr>\n","    <tr>\n","      <th>Embarked_C</th>\n","      <td>0.168240</td>\n","      <td>-0.082853</td>\n","      <td>0.032926</td>\n","      <td>-0.059528</td>\n","      <td>-0.011069</td>\n","      <td>0.269335</td>\n","      <td>0.296423</td>\n","      <td>-0.125416</td>\n","      <td>-0.153329</td>\n","      <td>1.000000</td>\n","      <td>-0.148258</td>\n","      <td>-0.782742</td>\n","    </tr>\n","    <tr>\n","      <th>Embarked_Q</th>\n","      <td>0.003650</td>\n","      <td>-0.074115</td>\n","      <td>-0.012373</td>\n","      <td>-0.026354</td>\n","      <td>-0.081228</td>\n","      <td>-0.117216</td>\n","      <td>-0.155342</td>\n","      <td>-0.127301</td>\n","      <td>0.237449</td>\n","      <td>-0.148258</td>\n","      <td>1.000000</td>\n","      <td>-0.499421</td>\n","    </tr>\n","    <tr>\n","      <th>Embarked_S</th>\n","      <td>-0.149683</td>\n","      <td>0.119224</td>\n","      <td>-0.021058</td>\n","      <td>0.068734</td>\n","      <td>0.060814</td>\n","      <td>-0.162184</td>\n","      <td>-0.161921</td>\n","      <td>0.189980</td>\n","      <td>-0.015104</td>\n","      <td>-0.782742</td>\n","      <td>-0.499421</td>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6a3110fb-b69c-4891-a483-f894b602af5f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6a3110fb-b69c-4891-a483-f894b602af5f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6a3110fb-b69c-4891-a483-f894b602af5f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ca73e0e8-e506-4396-bf17-a1d4d40228d2\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ca73e0e8-e506-4396-bf17-a1d4d40228d2')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ca73e0e8-e506-4396-bf17-a1d4d40228d2 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_b6858d17-d9cc-4acf-8539-915a3c8b02ca\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('cor')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_b6858d17-d9cc-4acf-8539-915a3c8b02ca button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('cor');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"cor","summary":"{\n  \"name\": \"cor\",\n  \"rows\": 12,\n  \"fields\": [\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.377762006235648,\n        \"min\": -0.543351380657755,\n        \"max\": 1.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          0.003650382683972141,\n          0.1682404312182332,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3652017483048672,\n        \"min\": -0.543351380657755,\n        \"max\": 1.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          -0.07411512301074041,\n          -0.08285346936132251,\n          -0.543351380657755\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.33678650860463416,\n        \"min\": -0.2810031821387907,\n        \"max\": 1.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          -0.012373441627673573,\n          0.032925818374027076,\n          -0.0691383291064345\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3275662344675141,\n        \"min\": -0.23579437672103923,\n        \"max\": 1.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          -0.026353729241717878,\n          -0.05952821504870188,\n          -0.035322498885735576\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.33037258136338743,\n        \"min\": -0.24548896009069898,\n        \"max\": 1.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          -0.08122810371273528,\n          -0.011068771902446714,\n          0.08162940708348335\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.38332914446405114,\n        \"min\": -0.4133325422867408,\n        \"max\": 1.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          -0.11721599017237641,\n          0.26933473491526416,\n          0.2573065223849626\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass_F\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.43295342825261274,\n        \"min\": -0.6267375846396959,\n        \"max\": 1.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          -0.15534244150029977,\n          0.29642267939666717,\n          0.28590376778374244\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass_S\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.36935472148818305,\n        \"min\": -0.565210153553826,\n        \"max\": 1.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          -0.12730128636474597,\n          -0.12541560201318214,\n          0.09334857241192883\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass_T\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4376670611792666,\n        \"min\": -0.6267375846396959,\n        \"max\": 1.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          0.23744875463762266,\n          -0.15332883840583264,\n          -0.32230835737297014\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked_C\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4112783680988513,\n        \"min\": -0.7827421287187312,\n        \"max\": 1.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          -0.14825817586486484,\n          1.0,\n          0.1682404312182332\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked_Q\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3560913708389207,\n        \"min\": -0.4994205136163796,\n        \"max\": 1.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          1.0,\n          -0.14825817586486484,\n          0.003650382683972141\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked_S\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.42490947979939253,\n        \"min\": -0.7827421287187312,\n        \"max\": 1.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          -0.4994205136163796,\n          -0.7827421287187312,\n          -0.1496827232706854\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":31}]},{"cell_type":"code","source":["sns.heatmap(cor,vmax=1,vmin=-1,annot=True,cmap='bwr')"],"metadata":{"id":"2hgCjeq8Raw5","executionInfo":{"status":"ok","timestamp":1715591992809,"user_tz":-330,"elapsed":2002,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"outputId":"c8855dcf-0ef6-4541-c9f0-b0f7eb43a675","colab":{"base_uri":"https://localhost:8080/","height":528}},"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: >"]},"metadata":{},"execution_count":32},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"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OXKksjXgZfWWla0ClueiK1sF0oM6VLYKFE3irFTUBodVtgrCYq//Ao4crvzutOidsVLZ0OVQZavAHZfWla3Cv8JAKRrM+aR8oPNYyrvWoPv/yn8qRkxERERERERE5P8ToiH2kdiyZQu6urrlbm9b00xEREREROS/jBis/2H8v4gR+zfQrl07AoqC5Euj9hHW/RIREREREfk38r9sRH0MREPsI6Gnp4feu752KyIiIiIiIiJSAtEQExEREREREakwokfswxANMREREREREZEKIxpiH4YYrC8iIiIiIiIiUkmIHjERERERERGRCiN6xD4M0RATERERERERqTCiIfZhiIaYiIiIiIiISIURDbEPQ/zE0X+N168rWwOS1c0rWwUMDSr/sk1NU3q30CemSpXK1kD4PGRlc/NmZWsg0LJV5V8TQwZX/r0xdGhla/DvwDHlcmWrAH/zm5wVITb24+Tzv7r2uegRExEREREREakwokfswxANMREREREREZEKIxpiH4a4fIWIiIiIiIiISCUhesREREREREREKozoEfswRENMREREREREpMKIhtiHIQ5NioiIiIiIiIhUEqJHTERERERERKTCiB6xD0M0xEREREREREQqjGiIfRj/7w2xxo0bU716dRYuXFjZqnwUtuzZw5rt24lPSsLd2ZkJQ4bg4+mpUP7ImTMsWrOG569e4WBtzch+/WhUt670eEJSEnNXrODXCxdIz8igpq8vE4YMwcHWViozcc4cfr94kbiEBLS1tPCq5o+ZmQU//XSSjIw0qlXzZ/TocOzsHN6q+65dW9i8eQ1JSfG4uLgzYsQEvLx85GSuX7/MihULiI29hrKyMq6uHixcuIaDB3ezefMaXr16XibfEcOH07dvX/nzPnqURYsW8fz5cxzs7Rk5ciSNGjWSHpdIJEQuXszOnTtJS0vD39+f8EmTcHAQzuH8+fP06Nmz3PPYuXMnPtWq8eef55g5cxJPnz5BIilES0ubvn0H0q1b6FvrYedOoR4SE+OpWtWdkSPl66Ffv+5cuvSHXBoNDU1Ago+PP2PGCHV98OAetm9fx6NHj9DV1aVFixZMnDgJgC1btrBmzRoSEuJxd3fnhx8m4OMjKyMnJ4dZs2Zy6NBh8vJyqV8/kEmTJmFiYiKVefHiBZMnh3P+/Hm0tbUJDg5m+PARqKoK3cbYsWPZuze6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\n"},"metadata":{}}]},{"cell_type":"markdown","source":["model building\n","\n","\n","1.x,y\n","2,Train and test split\n","3.Train the model using fit method\n","4.predict"],"metadata":{"id":"Wlvec9ByTqTK"}},{"cell_type":"code","source":["x=data1.drop('Survived',axis=1)\n","y=data1['Survived']"],"metadata":{"id":"XGp5qifJUAmi","executionInfo":{"status":"ok","timestamp":1715591992813,"user_tz":-330,"elapsed":26,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}}},"execution_count":33,"outputs":[]},{"cell_type":"code","source":["x"],"metadata":{"id":"E4QxWzHiW90a","executionInfo":{"status":"ok","timestamp":1715591992813,"user_tz":-330,"elapsed":25,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"outputId":"18487fd7-2828-4630-f960-c70116d3ee73","colab":{"base_uri":"https://localhost:8080/","height":443}},"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Sex   Age  SibSp  Parch     Fare  Pclass_F  Pclass_S  Pclass_T  \\\n","0      1  22.0      1      0   7.2500         0         0         1   \n","1      0  38.0      1      0  71.2833         1         0         0   \n","2      0  26.0      0      0   7.9250         0         0         1   \n","3      0  35.0      1      0  53.1000         1         0         0   \n","4      1  35.0      0      0   8.0500         0         0         1   \n","..   ...   ...    ...    ...      ...       ...       ...       ...   \n","886    1  27.0      0      0  13.0000         0         1         0   \n","887    0  19.0      0      0  30.0000         1         0         0   \n","888    0  30.0      1      2  23.4500         0         0         1   \n","889    1  26.0      0      0  30.0000         1         0         0   \n","890    1  32.0      0      0   7.7500         0         0         1   \n","\n","     Embarked_C  Embarked_Q  Embarked_S  \n","0             0           0           1  \n","1             1           0           0  \n","2             0           0           1  \n","3             0           0           1  \n","4             0           0           1  \n","..          ...         ...         ...  \n","886           0           0           1  \n","887           0           0           1  \n","888           0           0           1  \n","889           1           0           0  \n","890           0           1           0  \n","\n","[891 rows x 11 columns]"],"text/html":["\n","  <div id=\"df-20584a22-3117-417b-8121-f1fd61d8988e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Pclass_F</th>\n","      <th>Pclass_S</th>\n","      <th>Pclass_T</th>\n","      <th>Embarked_C</th>\n","      <th>Embarked_Q</th>\n","      <th>Embarked_S</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.2500</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>71.2833</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.9250</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>53.1000</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.0500</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>886</th>\n","      <td>1</td>\n","      <td>27.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>13.0000</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>887</th>\n","      <td>0</td>\n","      <td>19.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>30.0000</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>888</th>\n","      <td>0</td>\n","      <td>30.0</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>23.4500</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>889</th>\n","      <td>1</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>30.0000</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>890</th>\n","      <td>1</td>\n","      <td>32.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.7500</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>891 rows Ã— 11 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-20584a22-3117-417b-8121-f1fd61d8988e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-20584a22-3117-417b-8121-f1fd61d8988e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-20584a22-3117-417b-8121-f1fd61d8988e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-34f80219-f4ef-4a32-ae5f-75a47bda17fd\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-34f80219-f4ef-4a32-ae5f-75a47bda17fd')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-34f80219-f4ef-4a32-ae5f-75a47bda17fd button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_20a26429-723a-4777-9544-809c10b4b4eb\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('x')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_20a26429-723a-4777-9544-809c10b4b4eb button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('x');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"x","summary":"{\n  \"name\": \"x\",\n  \"rows\": 891,\n  \"fields\": [\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.591580394122483,\n        \"min\": 0.42,\n        \"max\": 60.0,\n        \"num_unique_values\": 77,\n        \"samples\": [\n          30.0,\n          16.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49.6934285971809,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          11.2417,\n          51.8625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass_F\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass_S\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass_T\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked_C\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked_Q\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked_S\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":34}]},{"cell_type":"code","source":["y"],"metadata":{"id":"AWoUDPB7XAFT","executionInfo":{"status":"ok","timestamp":1715591992814,"user_tz":-330,"elapsed":23,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"1af33789-af58-4f53-9ed8-8ca36e66fe9b"},"execution_count":35,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0      0\n","1      1\n","2      1\n","3      1\n","4      0\n","      ..\n","886    0\n","887    1\n","888    0\n","889    1\n","890    0\n","Name: Survived, Length: 891, dtype: int64"]},"metadata":{},"execution_count":35}]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25,random_state=0)"],"metadata":{"id":"7eBClh6iU1nr","executionInfo":{"status":"ok","timestamp":1715591992863,"user_tz":-330,"elapsed":67,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}}},"execution_count":36,"outputs":[]},{"cell_type":"code","source":["x_train # 75% of independent variable"],"metadata":{"id":"RLAdb6agW7qC","executionInfo":{"status":"ok","timestamp":1715591993450,"user_tz":-330,"elapsed":653,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"outputId":"3f92b574-6136-4c4d-dce4-9c7c0d3e94b0","colab":{"base_uri":"https://localhost:8080/","height":443}},"execution_count":37,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Sex   Age  SibSp  Parch     Fare  Pclass_F  Pclass_S  Pclass_T  \\\n","105    1  28.0      0      0   7.8958         0         0         1   \n","68     0  17.0      4      2   7.9250         0         0         1   \n","253    1  30.0      1      0  16.1000         0         0         1   \n","320    1  22.0      0      0   7.2500         0         0         1   \n","706    0  45.0      0      0  13.5000         0         1         0   \n","..   ...   ...    ...    ...      ...       ...       ...       ...   \n","835    0  39.0      1      1  83.1583         1         0         0   \n","192    0  19.0      1      0   7.8542         0         0         1   \n","629    1  30.0      0      0   7.7333         0         0         1   \n","559    0  36.0      1      0  17.4000         0         0         1   \n","684    1  60.0      1      1  39.0000         0         1         0   \n","\n","     Embarked_C  Embarked_Q  Embarked_S  \n","105           0           0           1  \n","68            0           0           1  \n","253           0           0           1  \n","320           0           0           1  \n","706           0           0           1  \n","..          ...         ...         ...  \n","835           1           0           0  \n","192           0           0           1  \n","629           0           1           0  \n","559           0           0           1  \n","684           0           0           1  \n","\n","[668 rows x 11 columns]"],"text/html":["\n","  <div id=\"df-5f856151-430f-41ef-bb30-a70634097bc3\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Pclass_F</th>\n","      <th>Pclass_S</th>\n","      <th>Pclass_T</th>\n","      <th>Embarked_C</th>\n","      <th>Embarked_Q</th>\n","      <th>Embarked_S</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>105</th>\n","      <td>1</td>\n","      <td>28.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.8958</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>68</th>\n","      <td>0</td>\n","      <td>17.0</td>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>7.9250</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>253</th>\n","      <td>1</td>\n","      <td>30.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>16.1000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>320</th>\n","      <td>1</td>\n","      <td>22.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.2500</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>706</th>\n","      <td>0</td>\n","      <td>45.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>13.5000</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>835</th>\n","      <td>0</td>\n","      <td>39.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>83.1583</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>192</th>\n","      <td>0</td>\n","      <td>19.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.8542</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>629</th>\n","      <td>1</td>\n","      <td>30.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.7333</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>559</th>\n","      <td>0</td>\n","      <td>36.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>17.4000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>684</th>\n","      <td>1</td>\n","      <td>60.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>39.0000</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>668 rows Ã— 11 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5f856151-430f-41ef-bb30-a70634097bc3')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5f856151-430f-41ef-bb30-a70634097bc3 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5f856151-430f-41ef-bb30-a70634097bc3');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-72c91443-63af-4ba0-a533-aca12d7fb9e3\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-72c91443-63af-4ba0-a533-aca12d7fb9e3')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-72c91443-63af-4ba0-a533-aca12d7fb9e3 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_55eea1bb-9861-4d2d-a0d9-967a04e48d4f\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('x_train')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_55eea1bb-9861-4d2d-a0d9-967a04e48d4f button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('x_train');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"x_train","summary":"{\n  \"name\": \"x_train\",\n  \"rows\": 668,\n  \"fields\": [\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.516520551922428,\n        \"min\": 0.67,\n        \"max\": 60.0,\n        \"num_unique_values\": 74,\n        \"samples\": [\n          45.0,\n          59.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 50.63202131933319,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 222,\n        \"samples\": [\n          42.4,\n          106.425\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass_F\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass_S\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass_T\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked_C\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked_Q\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked_S\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":37}]},{"cell_type":"code","source":["x_test # 25% of independent variable"],"metadata":{"id":"F4rUkPZ4XJ1a","executionInfo":{"status":"ok","timestamp":1715591993451,"user_tz":-330,"elapsed":68,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"outputId":"a73a5cd4-0d6f-433d-e33d-0c1c8ea91ee0","colab":{"base_uri":"https://localhost:8080/","height":443}},"execution_count":38,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Sex   Age  SibSp  Parch      Fare  Pclass_F  Pclass_S  Pclass_T  \\\n","495    1  30.0      0      0   14.4583         0         0         1   \n","648    1  30.0      0      0    7.5500         0         0         1   \n","278    1   7.0      4      1   29.1250         0         0         1   \n","31     0  30.0      1      0  146.5208         1         0         0   \n","255    0  29.0      0      2   15.2458         0         0         1   \n","..   ...   ...    ...    ...       ...       ...       ...       ...   \n","167    0  45.0      1      4   27.9000         0         0         1   \n","306    0  30.0      0      0  110.8833         1         0         0   \n","379    1  19.0      0      0    7.7750         0         0         1   \n","742    0  21.0      2      2  262.3750         1         0         0   \n","10     0   4.0      1      1   16.7000         0         0         1   \n","\n","     Embarked_C  Embarked_Q  Embarked_S  \n","495           1           0           0  \n","648           0           0           1  \n","278           0           1           0  \n","31            1           0           0  \n","255           1           0           0  \n","..          ...         ...         ...  \n","167           0           0           1  \n","306           1           0           0  \n","379           0           0           1  \n","742           1           0           0  \n","10            0           0           1  \n","\n","[223 rows x 11 columns]"],"text/html":["\n","  <div id=\"df-0cc6c5b0-ed26-45ee-99f6-ab96fbda1b96\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Pclass_F</th>\n","      <th>Pclass_S</th>\n","      <th>Pclass_T</th>\n","      <th>Embarked_C</th>\n","      <th>Embarked_Q</th>\n","      <th>Embarked_S</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>495</th>\n","      <td>1</td>\n","      <td>30.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>14.4583</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>648</th>\n","      <td>1</td>\n","      <td>30.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.5500</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>278</th>\n","      <td>1</td>\n","      <td>7.0</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>29.1250</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>31</th>\n","      <td>0</td>\n","      <td>30.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>146.5208</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>255</th>\n","      <td>0</td>\n","      <td>29.0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>15.2458</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>167</th>\n","      <td>0</td>\n","      <td>45.0</td>\n","      <td>1</td>\n","      <td>4</td>\n","      <td>27.9000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>306</th>\n","      <td>0</td>\n","      <td>30.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>110.8833</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>379</th>\n","      <td>1</td>\n","      <td>19.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.7750</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>742</th>\n","      <td>0</td>\n","      <td>21.0</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>262.3750</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>0</td>\n","      <td>4.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>16.7000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>223 rows Ã— 11 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0cc6c5b0-ed26-45ee-99f6-ab96fbda1b96')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0cc6c5b0-ed26-45ee-99f6-ab96fbda1b96 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0cc6c5b0-ed26-45ee-99f6-ab96fbda1b96');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f46f82ce-99cc-4d78-ae31-b942349bdcf3\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f46f82ce-99cc-4d78-ae31-b942349bdcf3')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f46f82ce-99cc-4d78-ae31-b942349bdcf3 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_563a9f93-10e3-4969-ab81-6f8bbdc88aaa\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('x_test')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_563a9f93-10e3-4969-ab81-6f8bbdc88aaa button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('x_test');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"x_test","summary":"{\n  \"name\": \"x_test\",\n  \"rows\": 223,\n  \"fields\": [\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.831711018240618,\n        \"min\": 0.42,\n        \"max\": 60.0,\n        \"num_unique_values\": 56,\n        \"samples\": [\n          30.0,\n          25.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 46.875334694540875,\n        \"min\": 0.0,\n        \"max\": 263.0,\n        \"num_unique_values\": 118,\n        \"samples\": [\n          52.0,\n          90.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass_F\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass_S\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass_T\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked_C\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked_Q\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked_S\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":38}]},{"cell_type":"code","source":["y_train  #75% of dependent variable"],"metadata":{"id":"VRhl_ivdX2qz","executionInfo":{"status":"ok","timestamp":1715591993452,"user_tz":-330,"elapsed":67,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"outputId":"7f2a8f08-a59d-4642-e929-7f8c04077584","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":39,"outputs":[{"output_type":"execute_result","data":{"text/plain":["105    0\n","68     1\n","253    0\n","320    0\n","706    1\n","      ..\n","835    1\n","192    1\n","629    0\n","559    1\n","684    0\n","Name: Survived, Length: 668, dtype: int64"]},"metadata":{},"execution_count":39}]},{"cell_type":"code","source":["y_test # 25% of dependent variable or Actual predictor"],"metadata":{"id":"kk1Phm3FX7YC","executionInfo":{"status":"ok","timestamp":1715591993452,"user_tz":-330,"elapsed":64,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"outputId":"7b66f075-244a-4c8c-95d5-ed8f48ebc084","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":40,"outputs":[{"output_type":"execute_result","data":{"text/plain":["495    0\n","648    0\n","278    0\n","31     1\n","255    1\n","      ..\n","167    0\n","306    1\n","379    0\n","742    1\n","10     1\n","Name: Survived, Length: 223, dtype: int64"]},"metadata":{},"execution_count":40}]},{"cell_type":"code","source":["from sklearn.linear_model import LogisticRegression\n","classifier=LogisticRegression()\n","classifier.fit(x_train,y_train)\n","# train the model using .fit"],"metadata":{"id":"qipTLoNIYFvT","executionInfo":{"status":"ok","timestamp":1715591993453,"user_tz":-330,"elapsed":62,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"outputId":"9c4452a3-4693-44e4-f3fe-9ab1637ed273","colab":{"base_uri":"https://localhost:8080/","height":241}},"execution_count":41,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n"]},{"output_type":"execute_result","data":{"text/plain":["LogisticRegression()"],"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":41}]},{"cell_type":"code","source":["ypred=classifier.predict(x_test)\n","ypred # predicted Survived"],"metadata":{"id":"AUaNwidyZyh6","executionInfo":{"status":"ok","timestamp":1715591993453,"user_tz":-330,"elapsed":56,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"outputId":"a433e1cc-eb19-47d9-d296-aa611c1754c7","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":42,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1,\n","       0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,\n","       1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0,\n","       1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0,\n","       1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1,\n","       0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,\n","       0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0,\n","       1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,\n","       1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1,\n","       0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,\n","       0, 1, 1])"]},"metadata":{},"execution_count":42}]},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score\n","accuracy_score(y_test,ypred)"],"metadata":{"id":"vNGki2B4hZPu","executionInfo":{"status":"ok","timestamp":1715591993454,"user_tz":-330,"elapsed":53,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"outputId":"049ab6e9-0505-42b2-d052-43c2bd9cc906","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":43,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.7937219730941704"]},"metadata":{},"execution_count":43}]},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix\n","cm = confusion_matrix(y_test,ypred)\n","cm"],"metadata":{"id":"R21kmjMQpczw","executionInfo":{"status":"ok","timestamp":1715591993455,"user_tz":-330,"elapsed":51,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"3dfeb5f6-2f4c-4b4f-f0a7-2c30dc866388"},"execution_count":44,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[116,  23],\n","       [ 23,  61]])"]},"metadata":{},"execution_count":44}]},{"cell_type":"code","source":["sns.heatmap(cm,annot=True)"],"metadata":{"id":"Kdma5jI8qSHh","executionInfo":{"status":"ok","timestamp":1715591993455,"user_tz":-330,"elapsed":48,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"outputId":"7c18a665-e1d3-4d08-9bb8-cd9bd25fbb2f","colab":{"base_uri":"https://localhost:8080/","height":448}},"execution_count":45,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: >"]},"metadata":{},"execution_count":45},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["from sklearn.metrics import classification_report\n","print(classification_report(y_test,ypred))"],"metadata":{"id":"vwWC-HAerhwQ","executionInfo":{"status":"ok","timestamp":1715591993456,"user_tz":-330,"elapsed":43,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"outputId":"336dfdf5-a00b-409c-b076-e5b79171a7d5","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":46,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.83      0.83      0.83       139\n","           1       0.73      0.73      0.73        84\n","\n","    accuracy                           0.79       223\n","   macro avg       0.78      0.78      0.78       223\n","weighted avg       0.79      0.79      0.79       223\n","\n"]}]},{"cell_type":"code","source":["Results = pandas.DataFrame(columns=['Actual','Predicted'])\n","Results['Actual']=y_test\n","Results['Predicted']=ypred\n","Results=Results.reset_index()\n","Results['ID']=Results.index\n","Results"],"metadata":{"id":"MToOEgbCtL3H","executionInfo":{"status":"ok","timestamp":1715591993457,"user_tz":-330,"elapsed":40,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"outputId":"1325bb26-3a06-4404-f290-373ca630e76e","colab":{"base_uri":"https://localhost:8080/","height":423}},"execution_count":47,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     index  Actual  Predicted   ID\n","0      495       0          0    0\n","1      648       0          0    1\n","2      278       0          0    2\n","3       31       1          1    3\n","4      255       1          1    4\n","..     ...     ...        ...  ...\n","218    167       0          0  218\n","219    306       1          1  219\n","220    379       0          0  220\n","221    742       1          1  221\n","222     10       1          1  222\n","\n","[223 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-92465620-2671-49e1-9905-7ee6854cac8e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>index</th>\n","      <th>Actual</th>\n","      <th>Predicted</th>\n","      <th>ID</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>495</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>648</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>278</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>31</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>255</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>218</th>\n","      <td>167</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>218</td>\n","    </tr>\n","    <tr>\n","      <th>219</th>\n","      <td>306</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>219</td>\n","    </tr>\n","    <tr>\n","      <th>220</th>\n","      <td>379</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>220</td>\n","    </tr>\n","    <tr>\n","      <th>221</th>\n","      <td>742</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>221</td>\n","    </tr>\n","    <tr>\n","      <th>222</th>\n","      <td>10</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>222</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>223 rows Ã— 4 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-92465620-2671-49e1-9905-7ee6854cac8e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-92465620-2671-49e1-9905-7ee6854cac8e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-92465620-2671-49e1-9905-7ee6854cac8e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-4b6037c5-3274-49bf-97fa-5ee345d5f3dc\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4b6037c5-3274-49bf-97fa-5ee345d5f3dc')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-4b6037c5-3274-49bf-97fa-5ee345d5f3dc button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_7f3aac32-352b-4f79-8f5c-4d6126b49bcd\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('Results')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_7f3aac32-352b-4f79-8f5c-4d6126b49bcd button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('Results');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"Results","summary":"{\n  \"name\": \"Results\",\n  \"rows\": 223,\n  \"fields\": [\n    {\n      \"column\": \"index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 249,\n        \"min\": 1,\n        \"max\": 890,\n        \"num_unique_values\": 223,\n        \"samples\": [\n          367,\n          397,\n          700\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Actual\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Predicted\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 64,\n        \"min\": 0,\n        \"max\": 222,\n        \"num_unique_values\": 223,\n        \"samples\": [\n          9,\n          84\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":47}]},{"cell_type":"code","source":["sns.lineplot(x='ID',y='Actual',data=Results.head(50)) #Actual price\n","sns.lineplot(x='ID',y='Predicted',data=Results.head(50)) #Predicted Price"],"metadata":{"id":"CDOWxQQ4tnt5","executionInfo":{"status":"ok","timestamp":1715591994261,"user_tz":-330,"elapsed":842,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"colab":{"base_uri":"https://localhost:8080/","height":467},"outputId":"81d0f972-ac9f-4cae-dd77-945acb9bea21"},"execution_count":48,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='ID', ylabel='Actual'>"]},"metadata":{},"execution_count":48},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import seaborn as sns\n","sns.lineplot(x='ID',y='Actual',data=Results.head(20))\n","sns.lineplot(x='ID',y='Predicted',data=Results.head(20))"],"metadata":{"id":"R55_nQIJgLUD","executionInfo":{"status":"ok","timestamp":1715591995199,"user_tz":-330,"elapsed":947,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"outputId":"b926a5be-97c4-4cf2-cf47-834ebe8c0c10","colab":{"base_uri":"https://localhost:8080/","height":467}},"execution_count":49,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='ID', ylabel='Actual'>"]},"metadata":{},"execution_count":49},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["list(x_test)"],"metadata":{"id":"Ppk_WRJ5pb-O","executionInfo":{"status":"ok","timestamp":1715591995201,"user_tz":-330,"elapsed":39,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"outputId":"3213da6e-35eb-422b-82ef-b286ad0d5074","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":50,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Sex',\n"," 'Age',\n"," 'SibSp',\n"," 'Parch',\n"," 'Fare',\n"," 'Pclass_F',\n"," 'Pclass_S',\n"," 'Pclass_T',\n"," 'Embarked_C',\n"," 'Embarked_Q',\n"," 'Embarked_S']"]},"metadata":{},"execution_count":50}]},{"cell_type":"code","source":["new=[[1,45,0,0,51,0,0,1,0,0,1]]\n","res=classifier.predict(new)\n","res\n","# why here we gety i mean,its male travelling in 3rd class without an y sibling or parent"],"metadata":{"id":"YuU6B4J8zUuf","executionInfo":{"status":"ok","timestamp":1715591995202,"user_tz":-330,"elapsed":32,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"outputId":"15d3ac9c-df79-435d-ad7d-1906de5744ba","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":51,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names\n","  warnings.warn(\n"]},{"output_type":"execute_result","data":{"text/plain":["array([0])"]},"metadata":{},"execution_count":51}]},{"cell_type":"code","source":["new=[[0,20,1,1,71,1,0,0,0,0,1]]\n","res=classifier.predict(new)\n","res\n","# why here we gety i mean,its female travelling in first class with sibling cor parent"],"metadata":{"id":"GBzP0FB80szy","executionInfo":{"status":"ok","timestamp":1715591995203,"user_tz":-330,"elapsed":27,"user":{"displayName":"Saranraj S","userId":"02320229459382075507"}},"outputId":"7bfe5bd9-5828-4e94-cb01-8e7086abe0b8","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":52,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names\n","  warnings.warn(\n"]},{"output_type":"execute_result","data":{"text/plain":["array([1])"]},"metadata":{},"execution_count":52}]}]}